/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

new (function () {
  function Dithering() {
    var _this = this;

    _classCallCheck(this, Dithering);

    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image1OriginalCanvas = document.querySelector("#original-image1");
    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image1DitheredCanvas = document.querySelector("#dithered-image1");
    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image1QuantizedCanvas = document.querySelector("#quantized-image1");
    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image2OriginalCanvas = document.querySelector("#original-image2");
    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image2DitheredCanvas = document.querySelector("#dithered-image2");
    /**
     *
     * @type {HTMLCanvasElement}
     */
    this.image2QuantizedCanvas = document.querySelector("#quantized-image2");
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx1Original = this.image1OriginalCanvas.getContext('2d');
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx1Dithered = this.image1DitheredCanvas.getContext('2d');
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx1Quantized = this.image1QuantizedCanvas.getContext('2d');
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx2Original = this.image2OriginalCanvas.getContext('2d');
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx2Dithered = this.image2DitheredCanvas.getContext('2d');
    /**
     *
     * @type {CanvasRenderingContext2D}
     */
    this.ctx2Quantized = this.image2QuantizedCanvas.getContext('2d');
    /**
     *
     * @type {HTMLImageElement}
     */
    this.img1 = new Image();
    this.img1.src = 'image1.jpg';
    this.img1.onload = function (e) {
      return _this.imageLoaded(e, 1);
    };
    /**
     *
     * @type {HTMLImageElement}
     */
    this.img2 = new Image();
    this.img2.src = 'image2.jpg';
    this.img2.onload = function (e) {
      return _this.imageLoaded(e, 2);
    };
    this.quantizationInput = document.querySelector("#quantization-factor");

    this.quantizationInput.addEventListener("change", function (event) {
      _this.imageLoaded(null, 1);
      _this.imageLoaded(null, 2);
    });
  }

  _createClass(Dithering, [{
    key: "getContext",
    value: function getContext(which) {
      return {
        img: this["img" + which],
        oCanvas: this["image" + which + "OriginalCanvas"],
        dCanvas: this["image" + which + "DitheredCanvas"],
        qCanvas: this["image" + which + "QuantizedCanvas"],
        oCtx: this["ctx" + which + "Original"],
        dCtx: this["ctx" + which + "Dithered"],
        qCtx: this["ctx" + which + "Quantized"]
      };
    }
  }, {
    key: "getImageData",
    value: function getImageData(which) {
      return this["ctx" + which + "Original"].getImageData(0, 0, this["img" + which].width, this["img" + which].height);
    }

    /**
     *
     * @param {number[]} data
     * @param {number} width
     * @param {number} height
     */

  }, {
    key: "dither",
    value: function dither(data, width, height) {
      var factor = this.quantizationInput.value;
      var ditheredData = new Array(data.length).fill(0);
      var quantizedData = new Array(data.length).fill(0);

      var rowSize = 4 * width;
      var index = function index(x, y) {
        return y * rowSize + x * 4;
      };
      var change = function change(val) {
        return Math.round(factor * val / 255) * Math.floor(255 / factor);
      };
      var update = function update(x, y, amount) {
        var i = index(x, y);
        var _ref = [change(data[i]), change(data[i + 1]), change(data[i + 2]), change(data[i + 3])],
            r = _ref[0],
            g = _ref[1],
            b = _ref[2],
            a = _ref[3];
        var eR = data[i] - r,
            eG = data[i + 1] - g,
            eB = data[i + 2] - b,
            eA = data[i + 3] - a;

        ditheredData[i] = r + eR * amount;
        ditheredData[i + 1] = g + eG * amount;
        ditheredData[i + 2] = b + eB * amount;
        ditheredData[i + 3] = a + eA * amount;
      };
      for (var y = 0; y < height - 1; y++) {
        for (var x = 1; x < width - 1; x++) {
          update(x + 1, y, 7 / 16);
          update(x - 1, y + 1, 3 / 16);
          update(x, y + 1, 5 / 16);
          update(x + 1, y + 1, 1 / 16);
          quantizedData[index(x, y)] = change(data[index(x, y)]);
          quantizedData[index(x, y) + 1] = change(data[index(x, y) + 1]);
          quantizedData[index(x, y) + 2] = change(data[index(x, y) + 2]);
          quantizedData[index(x, y) + 3] = change(data[index(x, y) + 3]);
        }
      }
      return [ditheredData, quantizedData];
    }

    /**
     *
     * @param {Event} event
     * @param {number} which
     */

  }, {
    key: "imageLoaded",
    value: function imageLoaded(event, which) {
      var _getContext = this.getContext(which),
          img = _getContext.img,
          oCanvas = _getContext.oCanvas,
          dCanvas = _getContext.dCanvas,
          qCanvas = _getContext.qCanvas,
          oCtx = _getContext.oCtx,
          dCtx = _getContext.dCtx,
          qCtx = _getContext.qCtx;

      var width = img.width;
      var height = img.height;
      oCanvas.width = width;
      oCanvas.height = height;
      dCanvas.width = width;
      dCanvas.height = height;
      qCanvas.width = width;
      qCanvas.height = height;

      oCtx.drawImage(img, 0, 0);

      var _dither = this.dither(Array.from(this.getImageData(which).data), width, height),
          _dither2 = _slicedToArray(_dither, 2),
          dithered = _dither2[0],
          quantized = _dither2[1];

      {
        var data = Uint8ClampedArray.from(dithered);
        var newImageData = new ImageData(data, width, height);

        dCtx.clearRect(0, 0, width, height);
        dCtx.putImageData(newImageData, 0, 0);
      }
      {
        var _data = Uint8ClampedArray.from(quantized);
        var _newImageData = new ImageData(_data, width, height);

        qCtx.clearRect(0, 0, width, height);
        qCtx.putImageData(_newImageData, 0, 0);
      }
    }
  }]);

  return Dithering;
}())();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,