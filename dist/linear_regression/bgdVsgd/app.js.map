{"version":3,"sources":["webpack:///webpack/bootstrap c5f360304b407c0b38f7","webpack:///./src/linear_regression/bgdVsgd/Main.es6","webpack:///./src/linear_regression/bgdVsgd/Regressor.es6"],"names":["Main","objectName","batchNum","costHistory","Highcharts","Chart","chart","renderTo","title","text","yAxis","plotLines","value","width","color","legend","layout","align","verticalAlign","borderWidth","series","name","data","lineWidth","type","marker","enabled","plotOptions","animation","lineData","charts","get","remove","addSeries","id","num","measurements","workerTypes","realNumbers","startYs","workers","i","push","radius","w","Worker","onmessage","e","receivedWorkerMessage","postMessage","action","workerType","startY","drawLine","$","html","epocNum","drawCost","rn1","Array","apply","length","NUM_POINTS","map","item","index","realEq1","rn2","realEq2","m1","min","RANDOM_ALPHA","max","Math","random","m2","makeDatasets","window","gistAsync","r1","round","r2","startY1","startY2","createWorkers","Regressor","rn","m","real_numbers","object_name","epocPost","setup","y","b","epoch","training_examples","x","points","error","pow","line","n","ni","getLineData","c","a","LEARNING_RATE","bestB","bestM","bestC","Infinity","timer","hc","pc","TIME_INTERVAL","MAX_ITERATION","PRECISION"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;AChEA;;;;;;;;IAEMA,I;;;iCAEOC,U,EAAYC,Q,EAAUC,W,EAAY;AACvC,gBAAIC,WAAWC,KAAf,CAAqB;AACjBC,uBAAM;AACFC,8BAAU,uBAAuBL;AAD/B,iBADW;AAIjBM,uBAAO;AACHC,0BAAMR,aAAa,sBAAb,IAAuCC,WAAW,CAAlD;AADH,iBAJU;AAOjBQ,uBAAO;AACHC,+BAAW,CAAC;AACRC,+BAAO,CADC;AAERC,+BAAO,CAFC;AAGRC,+BAAO;AAHC,qBAAD;AADR,iBAPU;AAcjBC,wBAAQ;AACJC,4BAAQ,UADJ;AAEJC,2BAAO,OAFH;AAGJC,mCAAe,QAHX;AAIJC,iCAAa;AAJT,iBAdS;AAoBjBC,wBAAQ,CAAC;AACLC,0BAAM,MADD;AAELC,0BAAMnB,WAFD;AAGLoB,+BAAY,CAHP;AAILC,0BAAM,QAJD;AAKLV,2BAAO,eALF;AAMLW,4BAAS;AACLC,iCAAU;AADL;AANJ,iBAAD,CApBS;AA8BjBC,6BAAY;AACRP,4BAAQ;AACJQ,mCAAW;AADP;AADA;AA9BK,aAArB;AAoCH;;;iCAEQ1B,Q,EAAU2B,Q,EAAS;AACxB,gBAAIT,SAAS,KAAKU,MAAL,CAAY5B,QAAZ,EAAsB6B,GAAtB,CAA0B,iBAA1B,CAAb;AACA,gBAAGX,MAAH,EAAU;AACNA,uBAAOY,MAAP;AACH;AACD,iBAAKF,MAAL,CAAY5B,QAAZ,EAAsB+B,SAAtB,CAAgC;AAC5BZ,sBAAM,iBADsB;AAE5Ba,oBAAI,iBAFwB;AAG5BZ,sBAAMO,QAHsB;AAI5BN,2BAAW,CAJiB;AAK5BC,sBAAM,QALsB;AAM5BV,uBAAO,WANqB;AAO5BW,wBAAQ;AACJC,6BAAS;AADL;AAPoB,aAAhC;AAWH;;;sCAEaS,G,EAAKC,Y,EAAcC,W,EAAaC,W,EAAaC,O,EAAQ;AAAA;;AAC/D,iBAAKT,MAAL,GAAc,EAAd;AACA,iBAAKU,OAAL,GAAe,EAAf;AACA,iBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIN,GAAnB,EAAwBM,GAAxB,EAA6B;AACzB,qBAAKX,MAAL,CAAYY,IAAZ,CAAiB,IAAItC,WAAWC,KAAf,CAAqB;AAClCC,2BAAO;AACHC,kCAAU,iBAAiBkC;AADxB,qBAD2B;AAIlCjC,2BAAO;AACHC,8BAAM;AADH,qBAJ2B;AAOlCC,2BAAO;AACHC,mCAAW,CAAC;AACRC,mCAAO,CADC;AAERC,mCAAO,CAFC;AAGRC,mCAAO;AAHC,yBAAD;AADR,qBAP2B;AAclCC,4BAAQ;AACJC,gCAAQ,UADJ;AAEJC,+BAAO,OAFH;AAGJC,uCAAe,QAHX;AAIJC,qCAAa;AAJT,qBAd0B;AAoBlCC,4BAAQ,CAAC;AACLC,8BAAM,aADD;AAELC,8BAAMc,aAAaK,CAAb,CAFD;AAGLlB,mCAAW,CAHN;AAILC,8BAAM,QAJD;AAKLV,+BAAO,eALF;AAMLW,gCAAQ;AACJC,qCAAS,IADL;AAEJiB,oCAAQ;AAFJ;AANH,qBAAD,CApB0B;AA+BlChB,iCAAa;AACTP,gCAAQ;AACJQ,uCAAW;AADP;AADC;AA/BqB,iBAArB,CAAjB;AAqCA,oBAAIgB,IAAI,IAAIC,MAAJ,CAAW,WAAX,CAAR;AACAD,kBAAEE,SAAF,GAAc,UAACC,CAAD,EAAO;AACjB,0BAAKC,qBAAL,CAA2BD,CAA3B;AACH,iBAFD;AAGAH,kBAAEK,WAAF,CAAc;AACVC,4BAAQ,iBADE;AAEVhD,8BAAUuC,CAFA;AAGVU,gCAAYd,YAAYI,CAAZ,CAHF;AAIVL,kCAAcA,aAAaK,CAAb,CAJJ;AAKVH,iCAAaA,YAAYG,CAAZ,CALH;AAMVW,4BAAQb,QAAQE,CAAR;AANE,iBAAd;AAQA,qBAAKD,OAAL,CAAaE,IAAb,CAAkBE,CAAlB;AACH;AACJ;;;8CAEqBG,C,EAAE;AACpB,oBAAOA,EAAEzB,IAAF,CAAO4B,MAAd;AACI,qBAAK,WAAL;AACI,yBAAKG,QAAL,CAAcN,EAAEzB,IAAF,CAAOpB,QAArB,EAA+B6C,EAAEzB,IAAF,CAAOO,QAAtC;AACAyB,sBAAE,iBAAiBP,EAAEzB,IAAF,CAAOpB,QAA1B,EAAoCqD,IAApC,CAAyC,YAAYR,EAAEzB,IAAF,CAAOkC,OAA5D;AACA;;AAEJ,qBAAK,WAAL;AACI,yBAAKC,QAAL,CAAcV,EAAEzB,IAAF,CAAOrB,UAArB,EAAiC8C,EAAEzB,IAAF,CAAOpB,QAAxC,EAAkD6C,EAAEzB,IAAF,CAAOnB,WAAzD;AACAmD,sBAAE,iBAAiBP,EAAEzB,IAAF,CAAOpB,QAA1B,EAAoCqD,IAApC,CAAyC,uBAAuBR,EAAEzB,IAAF,CAAOkC,OAA9B,GAAwC,aAAjF;AACA;AATR;AAWH;;;gCAEOf,C,EAAE;AACN,mBAAOA,CAAP;AACH;;;gCAEOA,C,EAAE;AACN,mBAAO,EAAP;AACH;;;uCAEa;AAAA;;AACV,gBAAMiB,MAAMC,MAAMC,KAAN,CAAY,IAAZ,EAAkB,EAACC,QAAQ,oBAAUC,UAAnB,EAAlB,EACPC,GADO,CACF,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACnB,uBAAO,OAAKC,OAAL,CAAaD,KAAb,CAAP;AACH,aAHO,CAAZ;;AAKA,gBAAME,MAAMR,MAAMC,KAAN,CAAY,IAAZ,EAAkB,EAACC,QAAQ,oBAAUC,UAAnB,EAAlB,EACPC,GADO,CACF,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACnB,uBAAO,OAAKG,OAAL,CAAaH,KAAb,CAAP;AACH,aAHO,CAAZ;;AAKA,gBAAMI,KAAKX,IACNK,GADM,CACF,UAAUC,IAAV,EAAgBvB,CAAhB,EAAmB;AACpB,oBAAI6B,MAAMN,OAAOA,OAAO,oBAAUO,YAAlC;AACA,oBAAIC,MAAMR,OAAOA,OAAO,oBAAUO,YAAlC;AACA,uBAAOE,KAAKC,MAAL,MAAiBF,MAAMF,GAAvB,IAA8BA,GAArC;AACH,aALM,CAAX;;AAOA,gBAAMK,KAAKR,IACNJ,GADM,CACF,UAAUC,IAAV,EAAgBvB,CAAhB,EAAmB;AACpB,oBAAI6B,MAAMN,OAAOA,OAAO,oBAAUO,YAAlC;AACA,oBAAIC,MAAMR,OAAOA,OAAO,oBAAUO,YAAlC;AACA,uBAAOE,KAAKC,MAAL,MAAiBF,MAAMF,GAAvB,IAA8BA,GAArC;AACH,aALM,CAAX;;AAOA,mBAAO,CAACZ,GAAD,EAAMW,EAAN,EAAUF,GAAV,EAAeQ,EAAf,CAAP;AACH;;;AAED,oBAAa;AAAA;;AAAA;;AAAA,4BACkB,KAAKC,YAAL,EADlB;AAAA;AAAA,YACFlB,GADE;AAAA,YACGW,EADH;AAAA,YACOF,GADP;AAAA,YACYQ,EADZ;;AAGTrB,UAAE,YAAM;AACJuB,mBAAOC,SAAP;AACA,gBAAMC,KAAKN,KAAKO,KAAL,CAAWP,KAAKC,MAAL,MAAiBL,GAAGR,MAAH,GAAY,CAA7B,CAAX,CAAX;AACA,gBAAMoB,KAAKR,KAAKO,KAAL,CAAWP,KAAKC,MAAL,MAAiBC,GAAGd,MAAH,GAAY,CAA7B,CAAX,CAAX;AACA,gBAAMqB,UAAUb,GAAGU,EAAH,CAAhB;AACA,gBAAMI,UAAUR,GAAGM,EAAH,CAAhB;AACA,mBAAKG,aAAL,CAAmB,CAAnB,EACI,CAACf,EAAD,EAAKM,EAAL,EAASN,EAAT,EAAaM,EAAb,CADJ,EAEI,CAAC,OAAD,EAAU,OAAV,EAAmB,YAAnB,EAAiC,YAAjC,CAFJ,EAGI,CAACjB,GAAD,EAAMS,GAAN,EAAWT,GAAX,EAAgBS,GAAhB,CAHJ,EAII,CAACe,OAAD,EAAUC,OAAV,EAAmBD,OAAnB,EAA4BC,OAA5B,CAJJ;AAMH,SAZD;AAaH;;;;;AAGL,IAAInF,IAAJ;;;;;;;;;;;;;;;;;;IC3LMqF,S;AAUF,uBAAYC,EAAZ,EAAgBC,CAAhB,EAAmBrF,QAAnB,EAA6BD,UAA7B,EAAwC;AAAA;;AACpC,aAAKuF,YAAL,GAAoBF,EAApB;AACA,aAAKlD,YAAL,GAAoBmD,CAApB;AACA,aAAKrF,QAAL,GAAgBA,QAAhB;AACA,aAAKuF,WAAL,GAAmBxF,UAAnB;AACA,aAAKE,WAAL,GAAmB,EAAnB;AACA,aAAKuF,QAAL,GAAgB,CAAhB;AACA,aAAKC,KAAL;AACH;;;;8BAEKC,C,EAAE;AACJ,iBAAKC,CAAL,GAASD,CAAT;AACA,iBAAKE,KAAL,CAAW,KAAKC,iBAAhB;AACH;;;6BAEIC,C,EAAE;AACH,mBAAO,KAAKH,CAAL,GAAS,KAAKN,CAAL,GAASS,CAAzB;AACH;;;6BAEIC,M,EAAQ;AACT,gBAAIC,QAAQ,CAAZ;AAAA,gBAAezD,UAAf;AAAA,gBAAkBuD,UAAlB;AAAA,gBAAqBJ,UAArB;AACA,iBAAKnD,IAAI,CAAT,EAAYA,IAAIwD,OAAOpC,MAAvB,EAA+BpB,GAA/B,EAAoC;AAChCuD,oBAAIC,OAAOxD,CAAP,EAAU,CAAV,CAAJ;AACAmD,oBAAIK,OAAOxD,CAAP,EAAU,CAAV,CAAJ;AACAyD,yBAASzB,KAAK0B,GAAL,CAAUP,IAAI,KAAKQ,IAAL,CAAUJ,CAAV,CAAd,EAA6B,CAA7B,CAAT;AACH;AACD,mBAAOE,QAAQD,OAAOpC,MAAtB;AACH;;;sCAEY;AAAA;;AACT,mBAAO,KAAK2B,YAAL,CAAkBzB,GAAlB,CAAsB,UAACsC,CAAD,EAAI5D,CAAJ,EAAU;AACnC,uBAAO,MAAK2D,IAAL,CAAU3D,CAAV,CAAP;AACH,aAFM,CAAP;AAGH;;;mCAES;AACNQ,wBAAY;AACRC,wBAAQ,WADA;AAERjD,4BAAY,KAAKwF,WAFT;AAGRvF,0BAAU,KAAKA,QAHP;AAIRC,6BAAa,KAAKA,WAJV;AAKRqD,yBAAS,KAAK8C;AALN,aAAZ;AAOH;;;mCAES;AACN,gBAAG,KAAKZ,QAAL,GAAgB,EAAhB,IAAsB,CAAzB,EAA4B;AACxB,oBAAM7D,WAAW,KAAK0E,WAAL,EAAjB;;AAEAtD,4BAAY;AACRC,4BAAQ,WADA;AAERrB,8BAAUA,QAFF;AAGR3B,8BAAU,KAAKA,QAHP;AAIRsD,6BAAS,KAAK8C;AAJN,iBAAZ;AAMH;AACD,iBAAKZ,QAAL;AACH;;;gCAEM;AACH;;;AAGA,iBAAKK,iBAAL,GAAyB,KAAK3D,YAAL,CACpB2B,GADoB,CAChB,UAACsC,CAAD,EAAI5D,CAAJ,EAAU;AACX,uBAAO,CAACA,CAAD,EAAI4D,CAAJ,CAAP;AACH,aAHoB,CAAzB;AAIA;;;;AAIA,iBAAKC,EAAL,GAAU,CAAV;AACA;;;;AAIA,iBAAKE,CAAL,GAAS,CAAT;AACA;;;;AAIA,iBAAKC,CAAL,GAASpB,UAAUqB,aAAnB;AACA;;;;AAIA,iBAAKC,KAAL,GAAa,CAAb;AACA;;;;AAIA,iBAAKC,KAAL,GAAa,CAAb;AACA;;;;AAIA,iBAAKC,KAAL,GAAaC,QAAb;AACA;;;;AAIA,iBAAKvB,CAAL,GAAS,CAAT;AACA;;;;AAIA,iBAAKwB,KAAL,GAAa,IAAb;AACA;;;;AAIA,iBAAKC,EAAL,GAAU,IAAV;AACA;;;;AAIA,iBAAKC,EAAL,GAAUH,QAAV;AACH;;;;;;AA/HCzB,S,CAGKvB,U,GAAa,E;AAHlBuB,S,CAIK6B,a,GAAgB,E;AAJrB7B,S,CAKKd,Y,GAAe,E;AALpBc,S,CAMKqB,a,GAAgB,K;AANrBrB,S,CAOK8B,a,GAAgB,I;AAPrB9B,S,CAQK+B,S,GAAY,K;kBA0HR/B,S","file":"./dist/linear_regression/bgdVsgd/app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c5f360304b407c0b38f7","import Regressor from './Regressor';\n\nclass Main{\n\n    drawCost(objectName, batchNum, costHistory){\n        new Highcharts.Chart({\n            chart:{\n                renderTo: 'hc_container_error' + batchNum\n            },\n            title: {\n                text: objectName + \"GD Cost Regression #\" + (batchNum + 1)\n            },\n            yAxis: {\n                plotLines: [{\n                    value: 0,\n                    width: 1,\n                    color: '#808080'\n                }]\n            },\n            legend: {\n                layout: 'vertical',\n                align: 'right',\n                verticalAlign: 'middle',\n                borderWidth: 0\n            },\n            series: [{\n                name: 'Cost',\n                data: costHistory,\n                lineWidth : 1,\n                type: 'spline',\n                color: 'palevioletred',\n                marker : {\n                    enabled : false\n                }\n            }],\n            plotOptions:{\n                series: {\n                    animation: false\n                }\n            }\n        });\n    }\n\n    drawLine(batchNum, lineData){\n        let series = this.charts[batchNum].get('regression_line');\n        if(series){\n            series.remove();\n        }\n        this.charts[batchNum].addSeries({\n            name: 'Regression Line',\n            id: 'regression_line',\n            data: lineData,\n            lineWidth: 1,\n            type: \"spline\",\n            color: 'steelblue',\n            marker: {\n                enabled: false\n            }\n        });\n    }\n\n    createWorkers(num, measurements, workerTypes, realNumbers, startYs){\n        this.charts = [];\n        this.workers = [];\n        for(let i = 0; i < num; i++) {\n            this.charts.push(new Highcharts.Chart({\n                chart: {\n                    renderTo: 'hc_container' + i\n                },\n                title: {\n                    text: ''\n                },\n                yAxis: {\n                    plotLines: [{\n                        value: 0,\n                        width: 1,\n                        color: '#808080'\n                    }]\n                },\n                legend: {\n                    layout: 'vertical',\n                    align: 'right',\n                    verticalAlign: 'middle',\n                    borderWidth: 0\n                },\n                series: [{\n                    name: 'Measurement',\n                    data: measurements[i],\n                    lineWidth: 0,\n                    type: 'spline',\n                    color: 'palevioletred',\n                    marker: {\n                        enabled: true,\n                        radius: 3\n                    }\n                }],\n                plotOptions: {\n                    series: {\n                        animation: false\n                    }\n                }\n            }));\n            let w = new Worker(\"Worker.js\");\n            w.onmessage = (e) => {\n                this.receivedWorkerMessage(e);\n            };\n            w.postMessage({\n                action: 'SET_WORKER_VARS',\n                batchNum: i,\n                workerType: workerTypes[i],\n                measurements: measurements[i],\n                realNumbers: realNumbers[i],\n                startY: startYs[i]\n            });\n            this.workers.push(w);\n        }\n    }\n\n    receivedWorkerMessage(e){\n        switch(e.data.action){\n            case 'DRAW_LINE':\n                this.drawLine(e.data.batchNum, e.data.lineData);\n                $(\"#epoc_number\" + e.data.batchNum).html(\"Epocs: \" + e.data.epocNum);\n                break;\n\n            case 'DRAW_COST':\n                this.drawCost(e.data.objectName, e.data.batchNum, e.data.costHistory);\n                $(\"#epoc_number\" + e.data.batchNum).html(\"Convergence in <b>\" + e.data.epocNum + \"</b> epocs!\");\n                break;\n        }\n    }\n\n    realEq1(i){\n        return i;\n    }\n\n    realEq2(i){\n        return 50;\n    }\n\n    makeDatasets(){\n        const rn1 = Array.apply(null, {length: Regressor.NUM_POINTS})\n            .map( (item, index) => {\n                return this.realEq1(index);\n            });\n\n        const rn2 = Array.apply(null, {length: Regressor.NUM_POINTS})\n            .map( (item, index) => {\n                return this.realEq2(index);\n            });\n\n        const m1 = rn1\n            .map(function (item, i) {\n                let min = item - item * Regressor.RANDOM_ALPHA;\n                let max = item + item * Regressor.RANDOM_ALPHA;\n                return Math.random() * (max - min) + min;\n            });\n\n        const m2 = rn2\n            .map(function (item, i) {\n                let min = item - item * Regressor.RANDOM_ALPHA;\n                let max = item + item * Regressor.RANDOM_ALPHA;\n                return Math.random() * (max - min) + min;\n            });\n\n        return [rn1, m1, rn2, m2];\n    }\n\n    constructor(){\n        const [rn1, m1, rn2, m2] = this.makeDatasets();\n\n        $(() => {\n            window.gistAsync();\n            const r1 = Math.round(Math.random() * (m1.length - 1));\n            const r2 = Math.round(Math.random() * (m2.length - 1));\n            const startY1 = m1[r1];\n            const startY2 = m2[r2];\n            this.createWorkers(4,\n                [m1, m2, m1, m2],\n                [\"BATCH\", \"BATCH\", \"STOCHASTIC\", \"STOCHASTIC\"],\n                [rn1, rn2, rn1, rn2],\n                [startY1, startY2, startY1, startY2]\n            );\n        });\n    }\n}\n\nnew Main();\n\n\n// WEBPACK FOOTER //\n// ./src/linear_regression/bgdVsgd/Main.es6","class Regressor{\n\n\n    static NUM_POINTS = 50;\n    static TIME_INTERVAL = 10;\n    static RANDOM_ALPHA = .5;\n    static LEARNING_RATE = 0.001;\n    static MAX_ITERATION = 1000;\n    static PRECISION = 0.001;\n\n    constructor(rn, m, batchNum, objectName){\n        this.real_numbers = rn;\n        this.measurements = m;\n        this.batchNum = batchNum;\n        this.object_name = objectName;\n        this.costHistory = [];\n        this.epocPost = 0;\n        this.setup();\n    }\n\n    start(y){\n        this.b = y;\n        this.epoch(this.training_examples);\n    }\n\n    line(x){\n        return this.b + this.m * x;\n    }\n\n    cost(points) {\n        let error = 0, i, x, y;\n        for (i = 0; i < points.length; i++) {\n            x = points[i][0];\n            y = points[i][1];\n            error += Math.pow((y - this.line(x)), 2);\n        }\n        return error / points.length;\n    }\n\n    getLineData(){\n        return this.real_numbers.map((n, i) => {\n            return this.line(i);\n        });\n    }\n\n    drawCost(){\n        postMessage({\n            action: 'DRAW_COST',\n            objectName: this.object_name,\n            batchNum: this.batchNum,\n            costHistory: this.costHistory,\n            epocNum: this.ni\n        });\n    }\n\n    drawLine(){\n        if(this.epocPost % 10 == 0) {\n            const lineData = this.getLineData();\n\n            postMessage({\n                action: 'DRAW_LINE',\n                lineData: lineData,\n                batchNum: this.batchNum,\n                epocNum: this.ni\n            });\n        }\n        this.epocPost++;\n    }\n\n    setup(){\n        /**\n         * Training examples is the [x, y] pairs that will be used for training\n         */\n        this.training_examples = this.measurements\n            .map((n, i) => {\n                return [i, n];\n            });\n        /**\n         * Number of iterations\n         * @type {number}\n         */\n        this.ni = 0;\n        /**\n         * Current Cost\n         * @type {number}\n         */\n        this.c = 0;\n        /**\n         * Alpha - Learning rate\n         * @type {number}\n         */\n        this.a = Regressor.LEARNING_RATE;\n        /**\n         * Best B - after convergence we choose the best B value\n         * @type {number}\n         */\n        this.bestB = 0;\n        /**\n         * Bese M - after convergence we choose the best M value\n         * @type {number}\n         */\n        this.bestM = 0;\n        /**\n         * Best Cost - keep track of the best cost we have reached so far\n         * @type {Number}\n         */\n        this.bestC = Infinity;\n        /**\n         * The slope\n         * @type {number}\n         */\n        this.m = 0;\n        /**\n         * The timer\n         * @type {null}\n         */\n        this.timer = null;\n        /**\n         * The HighCharts reference\n         * @type {Highcharts.Chart}\n         */\n        this.hc = null;\n        /**\n         * Previous cost, used for measuring precision\n         * @type {Number}\n         */\n        this.pc = Infinity;\n    }\n}\n\nexport default Regressor;\n\n\n// WEBPACK FOOTER //\n// ./src/linear_regression/bgdVsgd/Regressor.es6"],"sourceRoot":""}